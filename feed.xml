<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https:///williampolicy.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https:///williampolicy.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-26T12:32:31+00:00</updated><id>https:///williampolicy.github.io/feed.xml</id><title type="html">blank</title><subtitle>I would want to make a set [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html"></title><link href="https:///williampolicy.github.io/blog/2023/2023-06-19-Integrating-GPT3-into-iOS-Apps/" rel="alternate" type="text/html" title="" /><published>2023-06-26T12:32:31+00:00</published><updated>2023-06-26T12:32:31+00:00</updated><id>https:///williampolicy.github.io/blog/2023/2023-06-19-Integrating-GPT3-into-iOS-Apps</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/2023-06-19-Integrating-GPT3-into-iOS-Apps/"><![CDATA[<p>Today we explored how to integrate OpenAI’s GPT-3 into an iOS application using Swift. This process mainly involves setting up API requests, handling response data, and testing in a simulator. In this process, we also used Git for version control and error tracking.</p>

<h2 id="setting-up-api-requests">Setting Up API Requests</h2>
<p>We first created a function in Swift to set up the API request. This function takes an input prompt and sends it to the OpenAI API to generate GPT-3 output. We used the <code class="language-plaintext highlighter-rouge">URLSession.shared.dataTask(with:completionHandler:)</code> function to send the request and <code class="language-plaintext highlighter-rouge">JSONSerialization</code> to convert the returned data into a JSON format we can handle.</p>

<h2 id="handling-api-responses">Handling API Responses</h2>
<p>When handling the API response, we focused on the <code class="language-plaintext highlighter-rouge">choices</code> field, which contains the text generated by GPT-3. We took the first choice from this field and returned it as the result of the function.</p>

<h2 id="testing-in-simulator">Testing in Simulator</h2>
<p>Next, we tested in the iOS simulator. We used the command-line tool <code class="language-plaintext highlighter-rouge">xcrun simctl</code> to manage the simulator and the <code class="language-plaintext highlighter-rouge">xcrun simctl launch</code> command to launch our application. When the application runs in the simulator, we can see all the output of the print() statements in the console, including any error messages, which is very useful for debugging.</p>

<h2 id="using-git-for-version-control-and-error-tracking">Using Git for Version Control and Error Tracking</h2>
<p>When we encountered errors, we used Git for error tracking.</p>

<hr />

<p><strong>layout:</strong> post</p>

<p><strong>title:</strong> “集成GPT-3到iOS应用中：使用Swift进行OpenAI API调用”</p>

<p><strong>date:</strong> 2023-06-19</p>

<p><strong>categories:</strong> [OpenAI, GPT-3, iOS, Swift, App Development]</p>

<hr />

<p>今天我们探索了如何使用Swift集成OpenAI的GPT-3到iOS应用中。这个过程主要分为几个步骤，包括设置API请求，处理响应数据，以及在模拟器中进行测试。在这个过程中，我们还使用了Git来进行版本控制和错误跟踪。</p>

<h2 id="创建api请求">创建API请求</h2>
<p>我们首先使用Swift创建了一个函数来构建API请求。这个函数需要接受一个输入提示，然后将它发送到OpenAI的API，从而生成GPT-3的输出。我们使用<code class="language-plaintext highlighter-rouge">URLSession.shared.dataTask(with:completionHandler:)</code>函数发送请求，并使用<code class="language-plaintext highlighter-rouge">JSONSerialization</code>将返回的数据转换为我们可以处理的JSON格式。</p>

<h2 id="处理api响应">处理API响应</h2>
<p>在处理API响应时，我们主要关注的是<code class="language-plaintext highlighter-rouge">choices</code>字段，这个字段包含了GPT-3生成的文本。我们从这个字段中获取第一条选择，并将其作为函数的结果返回。</p>

<h2 id="在模拟器中进行测试">在模拟器中进行测试</h2>
<p>然后，我们在iOS模拟器中进行测试。我们使用了命令行工具<code class="language-plaintext highlighter-rouge">xcrun simctl</code>来管理模拟器，并使用<code class="language-plaintext highlighter-rouge">xcrun simctl launch</code>命令来启动我们的应用。在模拟器运行应用时，我们可以在控制台看到所有的print()语句输出，包括任何错误信息，这对于调试非常有用。</p>

<p>今天我们探索了如何使用Swift集成OpenAI的GPT-3到iOS应用中。这个过程主要分为几个步骤，包括设置API请求，处理响应数据，以及在模拟器中进行测试。在这个过程中，我们还使用了Git来进行版本控制和错误跟踪。</p>

<p>我们首先使用Swift创建了一个函数来构建API请求。这个函数需要接受一个输入提示，然后将它发送到OpenAI的API，从而生成GPT-3的输出。我们使用URLSession.shared.dataTask(with:completionHandler:)函数发送请求，并使用JSONSerialization将返回的数据转换为我们可以处理的JSON格式。</p>

<p>在处理API响应时，我们主要关注的是choices字段，这个字段包含了GPT-3生成的文本。我们从这个字段中获取第一条选择，并将其作为函数的结果返回。</p>

<p>然后，我们在iOS模拟器中进行测试。我们使用了命令行工具xcrun simctl来管理模拟器，并使用xcrun simctl launch命令来启动我们的应用。在模拟器运行应用时，我们可以在控制台看到所有的print()语句输出，包括任何错误信息，这对于调试非常有用。</p>

<p>当我们遇到错误时，我们使用Git进行错误跟踪。我们首先使用git diff查看自上次提交以来我们做了哪些改动，然后使用git log查看提交历史，找出可能导致错误的提交。一旦找到错误，我们就可以使用git revert来撤销这个提交，然后再进行修复。</p>

<p>当我们的应用正常运行并能够产生期望的输出时，我们使用Git来保存这个版本。我们首先使用git add .将所有改动添加到暂存区，然后使用git commit -m提交这些改动，并添加一个描述性的消息。最后，我们使用git tag添加一个标签来标记这个版本，然后使用git push将这个标签推送到远程仓库。</p>

<p>今天的工作中，我们学到了很多关于如何集成OpenAI的GPT-3到iOS应用中，如何在模拟器中进行测试，以及如何使用Git进行版本控制和错误跟踪的知识。我们还通过实际的操作，熟悉了这些工具和技术的应用。希望这个经验对你的工作也有所帮</p>]]></content><author><name></name></author></entry><entry><title type="html">Mastering Gitignore in Xcode Projects.md</title><link href="https:///williampolicy.github.io/blog/2023/Mastering_Gitignore_in_Xcode_Projects/" rel="alternate" type="text/html" title="Mastering Gitignore in Xcode Projects.md" /><published>2023-06-20T00:00:00+00:00</published><updated>2023-06-20T00:00:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/Mastering_Gitignore_in_Xcode_Projects</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/Mastering_Gitignore_in_Xcode_Projects/"><![CDATA[<h2 id="mastering-gitignore-for-efficient-version-control">Mastering <code class="language-plaintext highlighter-rouge">.gitignore</code> for Efficient Version Control</h2>

<h3 id="introduction">Introduction</h3>

<p>A key component of any project using Git for version control, the <code class="language-plaintext highlighter-rouge">.gitignore</code> file allows developers to specify which files and directories should be excluded from Git tracking. This aids in keeping repositories clean, efficient, and free from unnecessary files like build outputs, system files, or secrets that should not be publicly accessible.</p>

<h3 id="understanding-the-gitignore-file">Understanding the <code class="language-plaintext highlighter-rouge">.gitignore</code> File</h3>

<p>The <code class="language-plaintext highlighter-rouge">.gitignore</code> file uses specific syntax to determine which files to ignore. Each line of the file specifies a pattern. If a file or directory matches this pattern, it is ignored by Git. Here are some example patterns and their meanings:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">*.log</code> - Ignores all files with the <code class="language-plaintext highlighter-rouge">.log</code> extension.</li>
  <li><code class="language-plaintext highlighter-rouge">/tmp</code> - Ignores the <code class="language-plaintext highlighter-rouge">tmp</code> directory located in the same directory as the <code class="language-plaintext highlighter-rouge">.gitignore</code> file.</li>
  <li><code class="language-plaintext highlighter-rouge">debug/</code> - Ignores the <code class="language-plaintext highlighter-rouge">debug</code> directory.</li>
  <li><code class="language-plaintext highlighter-rouge">debug/*.log</code> - Ignores all <code class="language-plaintext highlighter-rouge">.log</code> files in the <code class="language-plaintext highlighter-rouge">debug</code> directory.</li>
</ol>

<h3 id="common-challenges-with-gitignore">Common Challenges with <code class="language-plaintext highlighter-rouge">.gitignore</code></h3>

<p>One common misconception about the <code class="language-plaintext highlighter-rouge">.gitignore</code> file is that adding a file to <code class="language-plaintext highlighter-rouge">.gitignore</code> will cause it to be untracked if it’s already being tracked by Git. This is not true. To untrack a file that’s currently tracked by Git, you need to manually untrack it using the <code class="language-plaintext highlighter-rouge">git rm --cached &lt;file&gt;</code> command.</p>

<p>Another challenge arises when specifying the file paths. Git doesn’t recognize relative file paths in <code class="language-plaintext highlighter-rouge">.gitignore</code>. Always specify the path from the repository root.</p>

<h3 id="case-study-ignoring-secretsplist-in-an-xcode-project">Case Study: Ignoring <code class="language-plaintext highlighter-rouge">Secrets.plist</code> in an XCode Project</h3>

<p>Let’s look at a real-world example from our chat. We were trying to ignore a <code class="language-plaintext highlighter-rouge">Secrets.plist</code> file located in the <code class="language-plaintext highlighter-rouge">./GPT3_APP/GPT3_APP/</code> directory.</p>

<p>Firstly, the entry was added in <code class="language-plaintext highlighter-rouge">.gitignore</code> as follows:</p>

<pre><code class="language-gitignore"># .gitignore file
./GPT3_APP/GPT3_APP/Secrets.plist
</code></pre>

<p>But upon running <code class="language-plaintext highlighter-rouge">git add .</code> and <code class="language-plaintext highlighter-rouge">git commit</code>, we found that <code class="language-plaintext highlighter-rouge">Secrets.plist</code> was still being tracked.</p>

<p>The issue was with the use of relative file path. Git didn’t recognize <code class="language-plaintext highlighter-rouge">./</code> in the path. Upon changing the <code class="language-plaintext highlighter-rouge">.gitignore</code> file to:</p>

<pre><code class="language-gitignore"># .gitignore file
GPT3_APP/GPT3_APP/Secrets.plist
</code></pre>

<p>Git correctly ignored the <code class="language-plaintext highlighter-rouge">Secrets.plist</code> file.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Understanding and effectively using the <code class="language-plaintext highlighter-rouge">.gitignore</code> file is a critical skill for any developer using Git for version control. It helps keep your repositories clean and prevents unnecessary files from being tracked and shared. Remember, <code class="language-plaintext highlighter-rouge">.gitignore</code> does not retroactively untrack files, and always use file paths relative to the project root.</p>

<p>This case study offered a glimpse into a real-world application of <code class="language-plaintext highlighter-rouge">.gitignore</code>, highlighting how important understanding this simple, yet powerful tool is for effective version control.</p>

<p>The file name of the blog as per your request would be: <code class="language-plaintext highlighter-rouge">2023-06-20-Understanding_Xcode_ProjecStructure_A_Comparative_Analysis.md</code></p>]]></content><author><name></name></author><category term="tutorial" /><category term="iOS development" /><category term="Swift" /><category term="SwiftUI" /><summary type="html"><![CDATA[Mastering .gitignore for Efficient Version Control]]></summary></entry><entry><title type="html">Understanding Xcode Project Structure: A Comparative Analysis</title><link href="https:///williampolicy.github.io/blog/2023/Understanding_Xcode_ProjecStructure_A_Comparative_Analysis/" rel="alternate" type="text/html" title="Understanding Xcode Project Structure: A Comparative Analysis" /><published>2023-06-20T00:00:00+00:00</published><updated>2023-06-20T00:00:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/Understanding_Xcode_ProjecStructure_A_Comparative_Analysis</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/Understanding_Xcode_ProjecStructure_A_Comparative_Analysis/"><![CDATA[<h1 id="understanding-xcode-project-structure-a-comparative-analysis">Understanding Xcode Project Structure: A Comparative Analysis</h1>

<p>Understanding the structure of an Xcode project is a crucial aspect of iOS development. The project structure informs how the source code, resources, and configuration files are organized, which helps in maintaining the project and collaborating with other developers more effectively. In this post, we will compare two Xcode project structures to better understand their layout and organization.</p>

<h2 id="project-structure-of-a-basic-swiftui-app">Project Structure of a Basic SwiftUI App</h2>

<p>The first project we are analyzing is a simple “Hello World” SwiftUI application. Its structure is as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HelloWorld
├── HelloWorld.xcodeproj
├── HelloWorld
│   ├── ContentView.swift
│   ├── AppDelegate.swift
│   └── ...
└── ...
</code></pre></div></div>

<h2 id="project-structure-of-our-custom-app">Project Structure of Our Custom App</h2>

<p>Our custom application, named ‘kang001’, has a different structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kang001
├── kang001
│   ├── Assets.xcassets
│   ├── ContentView.swift
│   ├── Preview Content
│   └── kang001App.swift
├── kang001.xcodeproj
│   ├── project.pbxproj
│   ├── project.xcworkspace
│   └── xcuserdata
├── kang001Tests
│   └── kang001Tests.swift
└── kang001UITests
    ├── kang001UITests.swift
    └── kang001UITestsLaunchTests.swift
</code></pre></div></div>

<h2 id="comparative-analysis">Comparative Analysis</h2>

<p>By comparing these two structures, we notice some important differences and similarities:</p>

<ol>
  <li>
    <p><strong>Shared Components</strong>: Both projects have a <code class="language-plaintext highlighter-rouge">.xcodeproj</code> directory containing the project settings and configurations, and a <code class="language-plaintext highlighter-rouge">ContentView.swift</code> file which is the primary user interface file in SwiftUI.</p>
  </li>
  <li>
    <p><strong>Testing Suites</strong>: The ‘kang001’ project contains <code class="language-plaintext highlighter-rouge">kang001Tests</code> and <code class="language-plaintext highlighter-rouge">kang001UITests</code> directories for unit tests and UI tests respectively. These directories are not present in the ‘HelloWorld’ project.</p>
  </li>
  <li>
    <p><strong>Assets</strong>: The ‘kang001’ project includes an <code class="language-plaintext highlighter-rouge">Assets.xcassets</code> directory for storing images, colors, and other assets. The ‘HelloWorld’ project does not show this, but it’s likely present in the ellipsis (<code class="language-plaintext highlighter-rouge">...</code>).</p>
  </li>
  <li>
    <p><strong>SwiftUI Life Cycle</strong>: In the ‘kang001’ project, we see a <code class="language-plaintext highlighter-rouge">kang001App.swift</code> file, which represents the entry point of the app using the new SwiftUI App life cycle introduced in iOS 14. The ‘HelloWorld’ project mentions an <code class="language-plaintext highlighter-rouge">AppDelegate.swift</code> file, indicating the use of the UIKit App life cycle.</p>
  </li>
</ol>

<p>This analysis helps us understand how different projects can have varying structures based on their requirements and the iOS version they target. Recognizing these variations and their implications will guide you in developing and managing your own iOS projects.</p>

<h1 id="理解xcode项目结构比较分析">理解Xcode项目结构：比较分析</h1>

<p>理解Xcode项目的结构是iOS开发的一个关键部分。项目结构决定了源代码、资源和配置文件的组织方式，这对于维护项目和与其他开发人员更有效地协作非常有帮助。在这篇文章中，我们将比较两种Xcode项目结构，以更好地理解它们的布局和组织方式。</p>

<h2 id="一个基础的swiftui应用程序的项目结构">一个基础的SwiftUI应用程序的项目结构</h2>

<p>我们首先分析的是一个简单的 “Hello World” SwiftUI应用程序。其结构如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HelloWorld
├── HelloWorld.xcodeproj
├── HelloWorld
│   ├── ContentView.swift
│   ├── AppDelegate.swift
│   └── ...
└── ...
</code></pre></div></div>

<h2 id="我们自定义应用的项目结构">我们自定义应用的项目结构</h2>

<p>我们自定义的应用，名为’kang001’，具有不同的结构：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kang001
├── kang001
│   ├── Assets.xcassets
│   ├── ContentView.swift
│   ├── Preview Content
│   └── kang001App.swift
├── kang001.xcodeproj
│   ├── project.pbxproj
│   ├── project.xcworkspace
│   └── xcuserdata
├── kang001Tests
│   └── kang001Tests.swift
└── kang001UITests
    ├── kang001UITests.swift
    └── kang001UITestsLaunchTests.swift
</code></pre></div></div>

<h2 id="比较分析">比较分析</h2>

<p>通过比较这两种结构，我们可以注意到一些重要的相似之处和差异：</p>

<ol>
  <li>
    <p><strong>共享组件</strong>：两个项目都有一个<code class="language-plaintext highlighter-rouge">.xcodeproj</code>目录，其中包含项目的设置和配置，以及一个<code class="language-plaintext highlighter-rouge">ContentView.swift</code>文件，这是SwiftUI中的主要用户界面文件。</p>
  </li>
  <li>
    <p><strong>测试套件</strong>：’kang001’项目包含<code class="language-plaintext highlighter-rouge">kang001Tests</code>和<code class="language-plaintext highlighter-rouge">kang001UITests</code>目录，分别用于单元测试和UI测试。这些目录在’HelloWorld’项目中并不存在。</p>
  </li>
  <li>
    <p><strong>资源</strong>：’kang001’项目包含一个<code class="language-plaintext highlighter-rouge">Assets.xcassets</code>目录，用于存储图像、颜色和其他资源。’HelloWorld’项目并未显示此项，但它很可能在省略号(<code class="language-plaintext highlighter-rouge">...</code>)中存在。</p>
  </li>
  <li>
    <p><strong>SwiftUI生命周期</strong>：在’kang001’项目中，我们看到了一个<code class="language-plaintext highlighter-rouge">kang001App.swift</code>文件，这代表了使用在iOS 14中引入的新的SwiftUI App生命周期的应用入口。’HelloWorld’项目中提到了一个<code class="language-plaintext highlighter-rouge">AppDelegate.swift</code>文件，表示使用的是UIKit App生命周期。</p>
  </li>
</ol>

<p>这种分析帮助我们理解基于不同的需求和目标iOS版本的不同项目可能具有不同的结构。识别这些变化及其影响将在你开发和管理</p>

<p>自己的iOS项目时起着指导作用。</p>]]></content><author><name></name></author><category term="tutorial" /><category term="iOS development" /><category term="Swift" /><category term="SwiftUI" /><summary type="html"><![CDATA[Understanding Xcode Project Structure: A Comparative Analysis]]></summary></entry><entry><title type="html">Understanding Python and Pip Versions, Aliases, and Storage Locations</title><link href="https:///williampolicy.github.io/blog/2023/python_data_structure/" rel="alternate" type="text/html" title="Understanding Python and Pip Versions, Aliases, and Storage Locations" /><published>2023-06-19T00:00:00+00:00</published><updated>2023-06-19T00:00:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/python_data_structure</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/python_data_structure/"><![CDATA[<h1 id="python-data-structures-and-their-usage-in-data-processing-a-case-study">Python Data Structures and Their Usage in Data Processing: A Case Study</h1>

<p>In data processing tasks, it’s essential to understand the type and structure of your data at each step of the process. This understanding helps to avoid potential errors, aids debugging, and ensures that the functions or methods used are compatible with the data structure.</p>

<p>For this article, we will use a simplified data processing workflow, which consists of three steps: data loading (<code class="language-plaintext highlighter-rouge">m1load</code>), data processing (<code class="language-plaintext highlighter-rouge">m2process</code>), and data displaying (<code class="language-plaintext highlighter-rouge">m3show</code>). Each step is encapsulated in its own function, and these functions are called sequentially in a main script (<code class="language-plaintext highlighter-rouge">main.py</code>). We will go through the process, focusing on the types of data involved and their implications.</p>

<h2 id="data-loading---m1load">Data Loading - <code class="language-plaintext highlighter-rouge">m1load</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">m1load</code> function reads a CSV file using the pandas function <code class="language-plaintext highlighter-rouge">pd.read_csv()</code>, which returns a pandas DataFrame. A DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. It is generally the most commonly used pandas object.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">m1load</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="data-processing---m2process">Data Processing - <code class="language-plaintext highlighter-rouge">m2process</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">m2process</code> function processes the loaded DataFrame and returns the mean value of the ‘value’ column, which is a pandas Series. A Series is a one-dimensional labeled array capable of holding any data type.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">m2process</span><span class="p">(</span><span class="n">dataframe</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">dataframe</span><span class="p">[</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
</code></pre></div></div>

<p>Here we made a simplification for demonstration purposes. In a more complex scenario, <code class="language-plaintext highlighter-rouge">m2process</code> might return a modified DataFrame.</p>

<h2 id="data-displaying---m3show">Data Displaying - <code class="language-plaintext highlighter-rouge">m3show</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">m3show</code> function simply prints the processed data, in this case, a single mean value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">m3show</span><span class="p">(</span><span class="n">dataframe</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>
</code></pre></div></div>

<p>Note that we are using the <code class="language-plaintext highlighter-rouge">print</code> function inside <code class="language-plaintext highlighter-rouge">m3show</code>, which means this function will not have a return value. Python’s <code class="language-plaintext highlighter-rouge">print</code> function is a void function meaning it doesn’t return anything, i.e., its return type is <code class="language-plaintext highlighter-rouge">NoneType</code>. If we were to include a return statement, we would need to ensure that we’re returning a value or a data structure, not the <code class="language-plaintext highlighter-rouge">print</code> function itself.</p>

<h2 id="main-script---mainpy">Main script - <code class="language-plaintext highlighter-rouge">main.py</code></h2>

<p>In the main script (<code class="language-plaintext highlighter-rouge">main.py</code>), these functions are called sequentially, and for each call, we print the type of the data being passed in and returned. This way, we can easily track the data’s structure at each step, ensuring it’s as expected and aiding in debugging if necessary.</p>

<hr />

<h1 id="python数据结构及其在数据处理中的应用案例研究">Python数据结构及其在数据处理中的应用：案例研究</h1>

<p>在数据处理任务中，理解每个处理步骤中数据的类型和结构是非常重要的。这种理解可以帮助避免可能的错误，有助于调试，并确保使用的函数或方法与数据结构兼容。</p>

<p>对于这篇文章，我们将使用一个简化的数据处理流程，该流程由三个步骤组成：数据加载(<code class="language-plaintext highlighter-rouge">m1load</code>)，数据处理(<code class="language-plaintext highlighter-rouge">m2process</code>)，和数据显示(<code class="language-plaintext highlighter-rouge">m3show</code>)。每个步骤都封装在自己的函数中，这些函数在主脚本(<code class="language-plaintext highlighter-rouge">main.py</code>)中按顺序调用。我们将遍历这个过程，重点关注涉及的数据类型及其含义。</p>

<h2 id="数据加载---m1load">数据加载 - <code class="language-plaintext highlighter-rouge">m1load</code></h2>

<p><code class="language-plaintext highlighter-rouge">m1load</code>函数使用</p>]]></content><author><name></name></author><category term="tutorial" /><category term="python" /><summary type="html"><![CDATA[Python Data Structures and Their Usage in Data Processing: A Case Study]]></summary></entry><entry><title type="html">Understanding Python and Pip Versions, Aliases, and Storage Locations</title><link href="https:///williampolicy.github.io/blog/2023/Python-and-Pip_version_alias_syspath/" rel="alternate" type="text/html" title="Understanding Python and Pip Versions, Aliases, and Storage Locations" /><published>2023-06-19T00:00:00+00:00</published><updated>2023-06-19T00:00:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/Python-and-Pip_version_alias_syspath</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/Python-and-Pip_version_alias_syspath/"><![CDATA[<h2 id="english-version">English Version</h2>

<h3 id="python-and-pip-what-are-they">Python and Pip: What are they?</h3>

<p>Python is a popular programming language, and Pip is Python’s package manager. The Python interpreter runs Python code, and Pip installs, manages, and upgrades Python packages.</p>

<h3 id="python-and-pip-versions">Python and Pip Versions</h3>

<p>Python and Pip both have their own versions. You can check the current versions of Python and Pip with the <code class="language-plaintext highlighter-rouge">python --version</code> and <code class="language-plaintext highlighter-rouge">pip --version</code> commands, respectively.</p>

<p>Sometimes, a system may have both Python 2 and Python 3. To distinguish between them, you can use <code class="language-plaintext highlighter-rouge">python2</code> or <code class="language-plaintext highlighter-rouge">python3</code>, and <code class="language-plaintext highlighter-rouge">pip2</code> or <code class="language-plaintext highlighter-rouge">pip3</code> to invoke specific versions of Python or Pip.</p>

<h3 id="python-and-pip-aliases">Python and Pip Aliases</h3>

<p>In your shell configuration file, you can set up aliases for easier invocation of Python and Pip. For example, if your system’s default <code class="language-plaintext highlighter-rouge">python</code> command is Python 2, you may want to set an alias so that <code class="language-plaintext highlighter-rouge">python</code> actually invokes Python 3. You can do this by adding the following lines to your <code class="language-plaintext highlighter-rouge">.bash_profile</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">python</span><span class="o">=</span>python3
<span class="nb">alias </span><span class="nv">pip</span><span class="o">=</span>pip3
</code></pre></div></div>

<p>After setting these aliases, when you type <code class="language-plaintext highlighter-rouge">python</code> or <code class="language-plaintext highlighter-rouge">pip</code> into your terminal, you’ll actually be invoking <code class="language-plaintext highlighter-rouge">python3</code> or <code class="language-plaintext highlighter-rouge">pip3</code>.</p>

<h3 id="python-and-pip-system-paths">Python and Pip System Paths</h3>

<p>In Unix-like systems, the <code class="language-plaintext highlighter-rouge">PATH</code> environment variable defines where the shell looks for executable files. When you type a command into your terminal, the shell looks for that command in the directories listed in your <code class="language-plaintext highlighter-rouge">PATH</code>.</p>

<p>The executable files for Python and Pip are usually located in <code class="language-plaintext highlighter-rouge">/usr/local/bin</code> or your user’s <code class="language-plaintext highlighter-rouge">~/.local/bin</code>. To ensure your shell can find Python and Pip, you need to make sure these directories are in your <code class="language-plaintext highlighter-rouge">PATH</code>.</p>

<p>You can use the <code class="language-plaintext highlighter-rouge">which</code> command to see the path of a specific command. For example, <code class="language-plaintext highlighter-rouge">which python</code> will show you the path to the Python interpreter, and <code class="language-plaintext highlighter-rouge">which pip</code> will show you the path to Pip.</p>

<p>Note that the <code class="language-plaintext highlighter-rouge">which</code> command ignores aliases. Even if you have <code class="language-plaintext highlighter-rouge">python</code> aliased to <code class="language-plaintext highlighter-rouge">python3</code>, <code class="language-plaintext highlighter-rouge">which python</code> will still show the path for Python 2. If you want to see the path of the actual command an alias refers to, you need to use <code class="language-plaintext highlighter-rouge">which python3</code>.</p>

<h3 id="python-and-pip-storage-locations">Python and Pip Storage Locations</h3>

<p>Python and Pip install packages to specific locations, which can be viewed via Python’s <code class="language-plaintext highlighter-rouge">sys.path</code>. <code class="language-plaintext highlighter-rouge">sys.path</code> is a list containing the directories Python looks in for packages and modules. When you import a module, Python looks for that module in the directories listed in <code class="language-plaintext highlighter-rouge">sys.path</code>.</p>

<p>You can view <code class="language-plaintext highlighter-rouge">sys.path</code> by entering the following command into the Python interpreter:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
</code></pre></div></div>

<p>This will display a list of directories where Python looks for packages and modules.</p>

<p>Note that even though the executable files for Python and Pip may be in different directories, they can still work together. This is because Pip installs packages to locations in <code class="language-plaintext highlighter-rouge">sys.path</code>, which the Python interpreter can access.</p>

<h2 id="chinese-version-中文版">Chinese Version (中文版)</h2>

<h3 id="python和pip它们是什么">Python和Pip：它们是什么？</h3>

<p>Python是一种流行的编程语言，而Pip是Python的包管理器。Python的解释器负责运行Python代码，而Pip则用来安装、管理和升级Python包</p>

<p>。</p>

<h3 id="python和pip的版本">Python和Pip的版本</h3>

<p>Python和Pip都有自己的版本。你可以通过<code class="language-plaintext highlighter-rouge">python --version</code>和<code class="language-plaintext highlighter-rouge">pip --version</code>命令来查看Python和Pip的当前版本。</p>

<p>有时候，一个系统可能同时有Python 2和Python 3。为了区分它们，你可以使用<code class="language-plaintext highlighter-rouge">python2</code>或<code class="language-plaintext highlighter-rouge">python3</code>，以及<code class="language-plaintext highlighter-rouge">pip2</code>或<code class="language-plaintext highlighter-rouge">pip3</code>来调用Python或Pip的特定版本。</p>

<h3 id="python和pip的别名">Python和Pip的别名</h3>

<p>在你的shell配置文件中，你可以设置别名，以便更容易地调用Python和Pip。例如，如果你的系统的默认<code class="language-plaintext highlighter-rouge">python</code>命令是Python 2，你可能希望设置一个别名，让<code class="language-plaintext highlighter-rouge">python</code>实际上调用Python 3。你可以通过在<code class="language-plaintext highlighter-rouge">.bash_profile</code>中添加以下行来做到这一点：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">python</span><span class="o">=</span>python3
<span class="nb">alias </span><span class="nv">pip</span><span class="o">=</span>pip3
</code></pre></div></div>

<p>设置这些别名后，当你在终端中输入<code class="language-plaintext highlighter-rouge">python</code>或<code class="language-plaintext highlighter-rouge">pip</code>时，实际上你会调用<code class="language-plaintext highlighter-rouge">python3</code>或<code class="language-plaintext highlighter-rouge">pip3</code>。</p>

<h3 id="python和pip的系统路径">Python和Pip的系统路径</h3>

<p>在Unix-like的系统中，<code class="language-plaintext highlighter-rouge">PATH</code>环境变量定义了shell在哪里寻找可执行文件。当你在终端中输入一个命令时，shell会在<code class="language-plaintext highlighter-rouge">PATH</code>中列出的目录中查找该命令。</p>

<p>Python和Pip的可执行文件通常位于<code class="language-plaintext highlighter-rouge">/usr/local/bin</code>或用户的<code class="language-plaintext highlighter-rouge">~/.local/bin</code>。为了确保你的shell能找到Python和Pip，你需要确保这些目录在你的<code class="language-plaintext highlighter-rouge">PATH</code>中。</p>

<p>你可以使用<code class="language-plaintext highlighter-rouge">which</code>命令来查看特定命令的路径。例如，<code class="language-plaintext highlighter-rouge">which python</code>会显示Python解释器的路径，而<code class="language-plaintext highlighter-rouge">which pip</code>会显示Pip的路径。</p>

<p>注意，<code class="language-plaintext highlighter-rouge">which</code>命令忽略别名。即使你把<code class="language-plaintext highlighter-rouge">python</code>设置为<code class="language-plaintext highlighter-rouge">python3</code>的别名，<code class="language-plaintext highlighter-rouge">which python</code>仍然会显示Python 2的路径。如果你想查看一个别名实际指向的命令的路径，你需要使用<code class="language-plaintext highlighter-rouge">which python3</code>。</p>

<h3 id="python和pip的存储位置">Python和Pip的存储位置</h3>

<p>Python和Pip会将包安装到特定的位置，这些位置可以通过Python的<code class="language-plaintext highlighter-rouge">sys.path</code>查看。<code class="language-plaintext highlighter-rouge">sys.path</code>是一个包含Python查找包和模块的目录的列表。当你导入一个模块时，Python会在<code class="language-plaintext highlighter-rouge">sys.path</code>中列出的目录中查找该模块。</p>

<p>你可以通过在Python解释器中输入以下命令查看<code class="language-plaintext highlighter-rouge">sys.path</code>：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
</code></pre></div></div>

<p>这将显示Python查找包和模块的目录列表。</p>

<p>注意，虽然Python和Pip的可执行文件可能存放在不同的目录，但它们都可以协同工作。这是因为Pip安装的包会被放在<code class="language-plaintext highlighter-rouge">sys.path</code>中，Python解释器可以在这些位置找到这些包。</p>

<h3 id="conclusion-结论">Conclusion (结论)</h3>

<p>理解Python和Pip的版本、别名、系统路径和存储位置对于</p>

<p>有效使用Python和Pip是很重要的。希望这篇文章能帮助你更好地理解这些概念，并在以后的Python编程中派上用场。</p>]]></content><author><name></name></author><category term="tutorial" /><category term="python" /><summary type="html"><![CDATA[English Version]]></summary></entry><entry><title type="html">Test Post</title><link href="https:///williampolicy.github.io/blog/2023/Test-Post/" rel="alternate" type="text/html" title="Test Post" /><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/Test-Post</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/Test-Post/"><![CDATA[<p>This is a test post.</p>

<h2 id="testing-blog-post-creation">Testing Blog Post Creation</h2>
<p>This post is created to test the process of adding a new blog post in our GitHub Pages site.</p>]]></content><author><name></name></author><category term="tutorial" /><category term="test" /><summary type="html"><![CDATA[This is a test post.]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="https:///williampolicy.github.io/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar" /><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p>

<h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2>

<p>To add a table of contents to a post as a sidebar, simply add</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div>
<p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p>

<h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h2 data-toc-text="Customizing" id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2>

<p>If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p>

<h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="toc" /><category term="sidebar" /><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">displaying beatiful tables with Bootstrap Tables</title><link href="https:///williampolicy.github.io/blog/2023/tables/" rel="alternate" type="text/html" title="displaying beatiful tables with Bootstrap Tables" /><published>2023-03-20T18:37:00+00:00</published><updated>2023-03-20T18:37:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/tables</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/tables/"><![CDATA[<p>Using markdown to display tables is easy. Just use the following syntax:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div>

<p>That will generate:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Left 1</td>
      <td style="text-align: center">center 1</td>
      <td style="text-align: right">right 1</td>
    </tr>
    <tr>
      <td style="text-align: left">Left 2</td>
      <td style="text-align: center">center 2</td>
      <td style="text-align: right">right 2</td>
    </tr>
    <tr>
      <td style="text-align: left">Left 3</td>
      <td style="text-align: center">center 3</td>
      <td style="text-align: right">right 3</td>
    </tr>
  </tbody>
</table>

<p></p>

<p>It is also possible to use HTML to display tables. For example, the following HTML code will display a table with <a href="https://bootstrap-table.com/">Bootstrap Table</a>, loaded from a JSON file:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">id=</span><span class="s">"table"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>

<table data-toggle="table" data-url="/assets/json/table_data.json">
  <thead>
    <tr>
      <th data-field="id">ID</th>
      <th data-field="name">Item Name</th>
      <th data-field="price">Item Price</th>
    </tr>
  </thead>
</table>

<p></p>

<p>By using <a href="https://bootstrap-table.com/">Bootstrap Table</a> it is possible to create pretty complex tables, with pagination, search, and more. For example, the following HTML code will display a table, loaded from a JSON file, with pagination, search, checkboxes, and header/content alignment. For more information, check the <a href="https://examples.bootstrap-table.com/index.html">documentation</a>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">data-click-to-select=</span><span class="s">"true"</span>
  <span class="na">data-height=</span><span class="s">"460"</span>
  <span class="na">data-pagination=</span><span class="s">"true"</span>
  <span class="na">data-search=</span><span class="s">"true"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-checkbox=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span> <span class="na">data-halign=</span><span class="s">"left"</span> <span class="na">data-align=</span><span class="s">"center"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span> <span class="na">data-halign=</span><span class="s">"center"</span> <span class="na">data-align=</span><span class="s">"right"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span> <span class="na">data-halign=</span><span class="s">"right"</span> <span class="na">data-align=</span><span class="s">"left"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>

<table data-click-to-select="true" data-height="460" data-pagination="true" data-search="true" data-toggle="table" data-url="/assets/json/table_data.json">
  <thead>
    <tr>
      <th data-checkbox="true"></th>
      <th data-field="id" data-halign="left" data-align="center" data-sortable="true">ID</th>
      <th data-field="name" data-halign="center" data-align="right" data-sortable="true">Item Name</th>
      <th data-field="price" data-halign="right" data-align="left" data-sortable="true">Item Price</th>
    </tr>
  </thead>
</table>]]></content><author><name></name></author><category term="sample-posts" /><summary type="html"><![CDATA[an example of how to use Bootstrap Tables]]></summary></entry><entry><title type="html">a post with table of contents</title><link href="https:///williampolicy.github.io/blog/2023/table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents" /><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https:///williampolicy.github.io/blog/2023/table-of-contents</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2023/table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents in the beginning of the post.</p>

<h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2>

<p>To add a table of contents to a post, simply add</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>
<p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p>

<h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h2 id="table-of-contents-options">Table of Contents Options</h2>

<p>If you want to learn more about how to customize the table of contents, you can check the <a href="https://github.com/toshimaru/jekyll-toc">jekyll-toc</a> repository.</p>

<h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="toc" /><summary type="html"><![CDATA[an example of a blog post with table of contents]]></summary></entry><entry><title type="html">Test Post for 2022</title><link href="https:///williampolicy.github.io/blog/2022/Test-Post/" rel="alternate" type="text/html" title="Test Post for 2022" /><published>2022-12-31T00:00:00+00:00</published><updated>2022-12-31T00:00:00+00:00</updated><id>https:///williampolicy.github.io/blog/2022/Test-Post</id><content type="html" xml:base="https:///williampolicy.github.io/blog/2022/Test-Post/"><![CDATA[]]></content><author><name></name></author><category term="test" /><category term="python" /><summary type="html"><![CDATA[]]></summary></entry></feed>